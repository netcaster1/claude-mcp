[project]
name = "search_server"
version = "1.3.4"
description = "MCP Search Server"
authors = [
    { name = "Ray Sheng", email = "jbsheng@gmail.com" }
]
dependencies = [
    "requests>=2.32.3",
    "trio",
    "pydantic>=2.0.0",
    "mcp>=1.0.0",
    "python-dotenv>=1.0.1",
    "exceptiongroup>=1.2.2",
]
requires-python = ">=3.10"

[project.scripts]
search-server = "search_server:main"
  
[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"
     
[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
addopts = "-v --tb=short"
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::pytest.PytestDeprecationWarning",
]
               
[tool.pytest-asyncio]
default_fixture_loop_scope = "function"

[tool.pyright]
include = ["src"]
exclude = [
    "**/node_modules",
    "**/__pycache__",
    ".venv"
]
reportMissingImports = true
reportOptionalSubscript = true
pythonVersion = "3.10"
  
[dependency-groups]
dev = [
    "pyright>=1.1.389",
    "pytest>=8.3.3",
    "pytest-asyncio>=0.23.5",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
]
  
[tool.coverage.run]
source = ["src"]
branch = true
 
[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
]
ignore_errors = true
omit = [
    "tests/*",
    "setup.py",
]
   